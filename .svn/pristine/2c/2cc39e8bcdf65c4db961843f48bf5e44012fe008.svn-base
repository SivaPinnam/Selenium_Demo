/**********
*  Created By: Persistent Automation Team
*  Created On: 11/30/2016
*  Modified On: 12/22/2016
**********/
package com.pathway.scripts;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.pathway.selenium.factory.SeleniumFunctions;
import com.pathway.util.Excel;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class Orders_DME_Page extends SeleniumFunctions {

	By order_tab = By.xpath("//a[contains(@href, '#Order')]");
	By enagement_list = By.xpath(".//*[contains(@class,'hotListElement')]");
	By add_order_button = By.xpath(".//*[contains(@value,'Add Order')]");
	By ordered_multiselect_list = By.xpath("//*[@id='pageid:formid:pclstOrdered_unselected']");
	By ordered_multiselect_listitem = By.xpath("//*[@id='pageid:formid:pclstOrdered_right_arrow']");
	By vender_provider = By.xpath("//*[@id='pageid:formid:Lookup3']");
	By ordering_provider = By.xpath("//img[@title='Ordering Provider Lookup (New Window)']");
	By search_field = By.xpath(".//*[@id='lksrch']");
	By go_button = By.xpath(".//*[contains(@class,'btn')]");
	By telephonic_diagnosis = By.xpath("//input[@id='pageid:formid:teleDiagnosis']");
	By vender_provider_phone = By.xpath("//*[@id='pageid:formid:vpPhone']");
	By cancel_button_dme = By.xpath(".//*[contains(@class,'btn slds-button slds-button--neutral')]");
	By save_button_dme = By.xpath("//input[@value='Save']");
	By order_list = By.xpath(".//*[contains(@class,'list _dataTable dataTable no-footer')]");
    By user_naval_label = By.xpath(".//*[contains(@id,'userNavLabel')]");
	By logout_button = By.xpath(".//*[contains(@title,'Logout')]");
	
	//** For Stage Environment
	By order_type_label = By.xpath("//h1[@class='slds-text-heading--large']");
	By file_upload = By.xpath("//*[contains (@type, 'file')]");	
	By view_vender_provider_phone = By.xpath("//*[contains(text(),'Vendor/Provider Phone')]//following::span[1]");
	By file_consumer_body = By.xpath("//*[contains(@class,'list _dataTable')]//tbody");
	//** End Stage Environment
	
	//** For QA Environment
	//By order_type_label = By.xpath("//h1[@class='slds-text-heading--large']");
	//By file_upload = By.xpath(".//*[@id='pageid:j_id240:file']");
	//By view_vender_provider_phone = By.xpath(".//*[@id='pageid:formid:j_id151']");
	//By file_consumer_body = By.id("pageid:formid:j_id196:j_id197:j_id200:j_id202:tb");
	//** End QA Environment
	
	By engagement_list = By.xpath("//*[@id='bodyCell']/div[3]/div[1]/div/div[2]/table");
	By order_Consumer_tab = By.xpath("//a[contains(@class, 'cons_Order')]");	
	By spinnerImg = By.xpath("//*[@class='spinner']");


	By verify_approval_needed_column = By.xpath("//*[@id='pageid:formid']/div[3]/div[6]/div/div/span");
	By view_ordered = By.xpath("//*[@id='pageid:formid:j_id55:j_id56:j_id73']/select");
	By view_ordering_provider = By.xpath("//*[@id='pageid:formid']/div[2]/div[13]/div/div/span");
	By view_telephonic_diagnosis = By.xpath("//*[@id='pageid:formid']/div[2]/div[12]/div/div/span");
	By view_vender_provider = By.xpath("//*[@id='pageid:formid']/div[2]/div[19]/div/div/span");
	
		
 

	
	// Data files
	String excel_file = "files//Orders.xlsx";
	String sheet_name = "DME_Order";

	// Data files attribute
	String ordered = Excel.readFromExcel(excel_file, sheet_name, 1, 0);
	String vendor_provider_data = Excel.readFromExcel(excel_file, sheet_name, 1, 1);
	String telephonic_diagnosis_data = Excel.readFromExcel(excel_file, sheet_name, 1, 2);
	String vendor_phone = Excel.readFromExcel(excel_file, sheet_name, 1, 3);
	String filePathAdd = Excel.readFromExcel(excel_file, sheet_name, 1, 4);
	String file_path_Consumer_add = Excel.readFromExcel(excel_file, sheet_name, 1, 4);

	// Class Variable
	private static String orderType = "DME";
	int countAfterCancel;
	int countBeforeAdd;
	int countAfterSave;
	int DME_orderCount_beforeadd;

	@Then("^validates that DME order page is displayed$")
	public void validates_that_DME_order_page_is_displayed() {
		verifyValues("DME order lable is not visible. DME Order is not displayed",true, isElementVisible(order_type_label));
		System.out.println("User is on the DME Order page");
	}

	@When("^user enters value for Entered By field$")
	public void user_enters_value_for_Entered_By_field() {
		System.out.println("Please enter the values");
	}

	@When("^enters value for ORDERED field of DME order page$")
	public void enters_value_for_ORDERED_field_of_DME_order_page() {
		wait(5);
		for (String val : ordered.split(";")) {
			selectByVisibleText(ordered_multiselect_list, val);
			System.out.println("Values are " + val);
		}
		click(ordered_multiselect_listitem);
	}

	@When("^enters value for ORDERING PROVIDER field of DME order page$")
	public void enters_value_for_ORDERING_PROVIDER_field_of_DME_order_page() {
		String searchString = getText(user_naval_label);
		click(ordering_provider);
		String parentHandle = getWindowHandle();
		for (String childHandle : getWindowHandles()) {
			if (!parentHandle.equals(childHandle)) {
				switchToWindow(childHandle);
				switchToFrame("searchFrame");
				enter(search_field, searchString);
				click(go_button);
				driver.switchTo().defaultContent();
				switchToFrame("resultsFrame");
				driver.findElement(By.linkText(searchString)).click();
				switchToWindow(parentHandle);
			}
		}
		System.out.println("Entered value for Ordering Provide");
	}

	@When("^enters value for VENDER/PROVIDER of DME order page$")
	public void enters_value_for_VENDER_PROVIDER_of_DME_order_page() {
		enter(vender_provider, vendor_provider_data);
	}

	@When("^enters value for TELEPHONIC DIAGNOSIS of DME order page$")
	public void enters_value_for_TELEPHONIC_DIAGNOSIS_of_DME_order_page() {
		enter(telephonic_diagnosis, telephonic_diagnosis_data);
	}

	@When("^enters value for VENDOR/PROVIDER PHONE of DME order page$")
	public void enters_value_for_VENDOR_PROVIDER_PHONE_of_DME_order_page() {
		enter(vender_provider_phone, vendor_phone);
	}

	@When("^uploads file for DME order on DME order page$")
	public void uploads_file_for_DME_order_on_DME_order_page() {
		filePathAdd = System.getProperty("user.dir") + "\\" + filePathAdd;
		enter(file_upload, filePathAdd);
	}

	@Then("^validates that new DME Order is not created$")
	public void validates_that_new_DME_Order_is_not_created() {
		countAfterCancel = new Order_Page().get_Order_Count(orderType);
		countBeforeAdd = Order_Page.orderCount_beforeadd;
		System.out.println("Previous Order count in order table is: " + countBeforeAdd);
		System.out.println("After Cancel, Order count in order table is: " + countAfterCancel);
		verifyValues("New DME order created after Cancel operation", countAfterCancel, countBeforeAdd);
		System.out.println("Order Cancelled Successfully");
	}

	@When("^clicks on Save button on DME order page$")
	public void clicks_on_Save_button_on_DME_order_page() {
		click(save_button_dme);
		wait(5);
	}

	@Then("^validates that new DME Order is created successfully$")
	public void validates_that_new_DME_Order_is_created_successfully() {
		countAfterSave = new Order_Page().get_Order_Count(orderType);
		countBeforeAdd = Order_Page.orderCount_beforeadd;
		System.out.println("Previous Order count in order table is: " + countBeforeAdd);
		System.out.println("After Save, Order count in order table is: " + countAfterSave);
		countBeforeAdd++;
		verifyValues("New DME Order is not  created successfully", countAfterSave, countBeforeAdd);
		System.out.println("Order Created Successfully");
	}

	@When("^user clicks on Orders tab of DME$")
	public void user_clicks_on_Orders_tab_of_DME() {
		click(order_tab);
	}

	@Then("^validates that Orders tab is displayed on Orders DME Page$")
	public void validates_that_Orders_tab_is_displayed_on_Orders_DME_Page() {
		isElementExist(order_list);
		System.out.println("Orders lists is displayed");
	}

	@Then("^clicks on Cancel button on DME order page$")
	public void clicks_on_View_Cancel_button_on_DME_order_page() {
		click(cancel_button_dme);
	}
	

	// Data files attribute
	

	@When("^user clicks on Orders tab on Consumer details page$")
	public void user_clicks_on_Orders_tab_on_Consumer_details_page() {
		wait(4);
		waitForElementToDisappear(spinnerImg);
		click(order_Consumer_tab);
		wait(4);
		waitForElementToDisappear(spinnerImg);
	}

	@Then("^validates that DME order page is displayed on Consumer details page$")
	public void validates_that_DME_order_page_is_displayed_on_Consumer_details_page() {
		wait(5);
		isElementExist(order_list);
		System.out.println("Orders lists is displayed");
	}

	@Then("^validate that value for Ordering Provider of DME order page on Consumer details page$")
	public void validate_that_value_for_Ordering_Provider_of_DME_order_page_on_Consumer_details_page() {
		String OrderingProvider = getText(user_naval_label);
		verifyelementText("Values has not succesfully selected for Ordering Provider of DME order page ",
				view_ordering_provider, OrderingProvider);
	}

	@Then("^validate that value for Ordered of DME order page on Consumer details page$")
	public void validate_that_value_for_Ordered_of_DME_order_page_on_Consumer_details_page() {
		Select ordered = new Select(findElement(view_ordered));
		List<WebElement> elementCount1 = ordered.getOptions();
		for (WebElement webElement : elementCount1) {
			System.out.println("You have chosen: '" + webElement.getText() + "' for Ordered.");
		}
	}

	@Then("^validate that value for Vendor/Provider of DME order page on Consumer details page$")
	public void validate_that_value_for_Vendor_Provider_of_DME_order_page_on_Consumer_details_page() {
		verifyelementText("Values has succesfully entered for Vendor/Provider of DME order page ", view_vender_provider,
				vendor_provider_data);
	}

	@Then("^validate that value for Telephonic Diagnosis of DME order page on Consumer details page$")
	public void validate_that_value_for_Telephonic_Diagnosis_of_DME_order_page_on_Consumer_details_page() {
		verifyelementText("Values has not succesfully entered for Telephonic Diagnosis of DME order page ",
				view_telephonic_diagnosis, telephonic_diagnosis_data);
	}

	@Then("^validate that value for Vendor/Provider Phone of DME order page on Consumer details page$")
	public void validate_that_value_for_Vendor_Provider_Phone_of_DME_order_page_on_Consumer_details_page() {
		verifyelementText("Values has not succesfully entered for Vendor/Provider Phone of DME order page ",
				view_vender_provider_phone, vendor_phone);
	}

	@Then("^validate that new file has been uploaded on DME order page on Consumer details page$")
	public void validate_that_new_file_has_been_uploaded_on_DME_order_page_on_Consumer_details_page() {
		wait (3);
		WebElement filesBody = findElement(file_consumer_body);
		List<WebElement> rows = filesBody.findElements(By.tagName("tr"));
		// file name of the uploaded file
		String fname = rows.get(0).findElements(By.tagName("td")).get(2).getText();

		int fIndex = file_path_Consumer_add.lastIndexOf("\\");
		String uploadedFname = file_path_Consumer_add.substring(fIndex + 1);
		verifyValues("File has not uploaded", fname, uploadedFname);
	}

	@Then("^clicks on Cancel button on DME order page on Consumer details page$")
	public void clicks_on_Cancel_button_on_DME_order_page_on_Consumer_details_page() {
       click(cancel_button_dme);
	}
	
}
