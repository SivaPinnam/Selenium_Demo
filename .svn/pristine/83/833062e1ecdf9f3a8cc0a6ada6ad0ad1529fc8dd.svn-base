package com.pathway.selenium.factory;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.InvalidElementStateException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.pathway.scripts.ScriptRunner;


public class SeleniumFunctions extends ScriptRunner {
	
	// C :-
	
		public void click(By locator){
			waitForElementtoBeVisible(locator);
			waitForElementtoBeClickable(locator);
			driver.findElement(locator).click();
		}
		
		public void closeCurrentTab(){
			driver.close();
		}
		
		public void closeSingleinstance(){
			driver.close();
			driver = null;
			wait = null;
		}
		
		public void closeAllinstances(){
			driver.quit();
			driver = null;
			wait = null;
		}
		
	// E :-	
		
		public void enter(By locator, String txt){
			waitForElementtoBeVisible(locator);
			if(! isElementEnable(locator)){
				wait(5);
			}
			driver.findElement(locator).clear();
			driver.findElement(locator).sendKeys(txt);
		}
	
	// F :-	
		
		public WebElement findElement(By locator){
			waitForElementtoBeVisible(locator);
			return driver.findElement(locator);
		}
		
		public List<WebElement> findElements(By locator){
			waitForElementtoBeVisible(locator);
			return driver.findElements(locator);
		}
		
		
		
	// G :-
		
		public void getUrl(String url){
			if(wait == null){
				ScriptRunner.setWait();
			}

			driver.manage().window().maximize();
			driver.get(url);
			System.out.println("User have entered URL successfully");
		}
		
		public String getText(By locator){
			waitForElementtoBePresent(locator);
			return driver.findElement(locator).getText();
		}
		
		public String getTitle(){
			return driver.getTitle();
		}
		
		public int getBrowserinstanceSize(){
			return driver.getWindowHandles().size();
		}
		public int getElementSize(By locator){
			return driver.findElements(locator).size();
		}
		
		public String getCurrentUrl(){
			return driver.getCurrentUrl();
		}
		
		public String getPageSource(){
			return driver.getPageSource();
		}
		
		/**
		 * This method will be used to get all the windows.
		 * @return
		 */
		public Set<String> getWindowHandles(){
			return driver.getWindowHandles();
		}
		
		public String getWindowHandle(){
			return driver.getWindowHandle();
		}
		
		public void getWindowHandle1(){
		ArrayList<String> tabs2 = new ArrayList<String> (driver.getWindowHandles());
		driver.switchTo().window(tabs2.get(0));
		driver.close();
		driver.switchTo().window(tabs2.get(1));
		}
		
		public void swithtoWindowHandle(){
			ArrayList<String> tabs2 = new ArrayList<String> (driver.getWindowHandles());
			driver.switchTo().window(tabs2.get(1));
			}
		public void swithToOiriginalndowHandle(){
			ArrayList<String> tabs2 = new ArrayList<String> (driver.getWindowHandles());
			driver.switchTo().window(tabs2.get(0));
			}
		
		/**
		 * This method will used to switch to a window using window handle
		 * @param windowHandle
		 */
		public void switchToWindow(String windowHandle){
			driver.switchTo().window(windowHandle);
		}
		
		
		
		/**CREATED BY: PERSISTENT TEAM
		 * CREATED ON: 07/12/2016
		 * This method will get the list of all the options from dropdown/multiselect picklist
		 * @param locator
		 * @return
		 */
		public List<WebElement> getAllOptions(By locator){
			waitForElementtoBeVisible(locator);
			WebElement dropdown = driver.findElement(locator);
			Select select = new Select(dropdown);
			return select.getOptions();
		}
		
		/**
		 * This method will get the list of selected elements.
		 * @param locator
		 * @return
		 */
		public List<WebElement> getAllSelectedOptions(By locator){
			waitForElementtoBeVisible(locator);
			WebElement dropdown = driver.findElement(locator);
			Select select = new Select(dropdown);
			return select.getAllSelectedOptions();
		}
		
		public List<WebElement> getElementList(By locator){
			waitForElementtoBeVisible(locator);
			return driver.findElements(locator);
		}
		
	// I :-

		public boolean isElementVisible(By locator){
			try {
				wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
				return true;

			} catch (TimeoutException e) {
				System.out.println("Element is not visible : " +locator);
				return false;
			}
		}
		
		public boolean isElementExist(By locator){
			try {
				driver.findElement(locator);
				return true;

			} catch (NoSuchElementException e) {
				System.out.println("Element is not exist : " +locator);
				return false;
			}
		}
		
		/**
		 * This method will verify if targeted select box is multiple select box or not
		 * means we can select multiple options from that select box or not
		 * @return 
		 */
		public boolean isMultiselect(By locator) {
			waitForElementtoBeVisible(locator);
			WebElement dropdown = driver.findElement(locator);
			Select listbox = new Select(dropdown);
			return listbox.isMultiple();
		}
		
		public boolean isElementEnable(By locator){
			waitForElementtoBeVisible(locator);
			return driver.findElement(locator).isEnabled();
		}
		
		public boolean isElementSelected(By locator){
			waitForElementtoBeVisible(locator);
			return driver.findElement(locator).isSelected();
		}
		
		
	// M :-
		
		/**
		 * This method will used for mouse hover elements to hover the element
		 * @param locator
		 */
		public void moveToElement(By locator){
			Actions actions = new Actions(driver);
			waitForElementtoBeVisible(locator);
			WebElement move = driver.findElement(locator);
			actions.moveToElement(move).perform();;
		}
		
		/**
		 * This method will used for mouse hover elements.
		 * It will mouse hover the element and then click on the specific locator 
		 * @param locator :- mouse hover element
		 * @param click :- click on element from the mouse hover list
		 */
		public void moveToElementAndClick(By locator, By click){
			Actions actions = new Actions(driver);
			waitForElementtoBeVisible(locator);
			WebElement move = driver.findElement(locator);
			WebElement click_locator = driver.findElement(click);
			actions.moveToElement(move).click(click_locator).build().perform();;
		}
		
	
	// N :-
		
		public void navigateBack(){
			driver.navigate().back();
		}
		
		public void navigateForward(){
			driver.navigate().forward();
		}
		
		public void navigateToUrl(String url){
			driver.navigate().to(url);
		}
		
		
	// R :-
		
		public void refreshPage(){
			driver.navigate().refresh();
		}
	
	// S :- 
		
		/**
		 * This method will select option from dropdown by using visible text
		 * @param locator
		 * @param value
		 */
		public void selectByVisibleText(By locator, String value){
			waitForElementtoBeVisible(locator);
			WebElement dropdown = driver.findElement(locator);
			Select select = new Select(dropdown);
			select.selectByVisibleText(value);
		}
		
		/**
		 * This method will select option from dropdown by using visible text
		 * @param element : provide web element
		 * @param value
		 */
		public void selectByVisibleText(WebElement element, String value){
			Select select = new Select(element);
			select.selectByVisibleText(value);
		}
		
		/**
		 * This method will select option from dropdown by using value
		 * @param locator
		 * @param value
		 */
		public void selectByValue(By locator, String value){
			waitForElementtoBeVisible(locator);
			WebElement dropdown = driver.findElement(locator);
			Select select = new Select(dropdown);
			select.selectByValue(value);
		}
		
		/**
		 * This method will select option from dropdown by using index
		 * @param locator
		 * @param index
		 */
		public void selectByIndex(By locator, int index){
			waitForElementtoBeVisible(locator);
			WebElement dropdown = driver.findElement(locator);
			Select select = new Select(dropdown);
			select.selectByIndex(index);
		}
		
		public String getFirstSelectedOption(By locator){   
		       WebElement dropdown = findElement(locator);
		       Select select = new Select(dropdown);
		       WebElement first_selected_element = select.getFirstSelectedOption();
		       return first_selected_element.getText();
		}
		/**
		 * This method will select the check box
		 * @param locator
		 */
		public void selectCheckBox(By locator){
			waitForElementtoBeVisible(locator);
			if(! driver.findElement(locator).isSelected()){
				driver.findElement(locator).click();
			}
		}
		
		/**
		 * This method will de-select the check box
		 * @param locator
		 */
		public void deselectCheckBox(By locator){
			waitForElementtoBeVisible(locator);
			if(driver.findElement(locator).isSelected()){
				driver.findElement(locator).click();
			}
		}
		
		/**
		 * This method will switch to frame using frame id
		 * @param frameId
		 */
		public void switchToFrame(String frameId){
			driver.switchTo().frame(frameId);
		}
		
		/**
		 * This method will used to switch back to the default page
		 */
		public void switchToDefaultContent(){
			driver.switchTo().defaultContent();
		}
		/**
		 * This method will switch to the alert and accept it
		 */
		public void switchToAlertAndAccept() {
			wait.until(ExpectedConditions.alertIsPresent());
			driver.switchTo().alert().accept();
		}
		
		/**
		 * This method will switch to the alert and dismiss it
		 */
		public void switchToAlertAndDismiss() {
			wait.until(ExpectedConditions.alertIsPresent());
			driver.switchTo().alert().dismiss();
		}
		
		/**
		 * This method will switch to the alert and get the text present in the alert
		 */
		public String switchToAlertAndGetText() {
			wait.until(ExpectedConditions.alertIsPresent());
			return driver.switchTo().alert().getText();
		}
		
		/**
		 * This method will switch to the alert and it will enter text in the alert text field
		 */
		public void switchToAlertAndEnterText(String text) {
			wait.until(ExpectedConditions.alertIsPresent());
			driver.switchTo().alert().sendKeys(text);;
		}
	// V :-
		
		public void verifyValues(String msg, boolean expected, boolean actuals){
			Assert.assertEquals(msg, expected, actuals);
		}
		
		public void verifyValues(String msg, String expected, String actuals){
			Assert.assertEquals(msg, expected, actuals);
		}
		
		public void verifyValues(String msg, int expected, int actuals){
			Assert.assertEquals(msg, expected, actuals);
		}

		public void verifyelementText(String msg, By locator, String expectedTxt){
			verifyValues(msg, expectedTxt, getText(locator));
		}
		
		public void verifyElementAttributeValue(String msg, By locator, String attribute, String expected){
			waitForElementtoBePresent(locator);
			String value = driver.findElement(locator).getAttribute(attribute);
			verifyValues(msg, expected, value);
		}
		
		public void verifyElementExists(String msg, By locator){
			verifyValues(msg, true, isElementExist(locator));
		}
		
		public void verifyValuesNotEquals(String msg, String expected, String actual){
			Assert.assertNotEquals(msg, expected, actual);
		}
		
		public void verifyValuesNotEquals(String msg, int expected, int actual){
			Assert.assertNotEquals(msg, expected, actual);
		}
		
		public void verifyValuesNotEquals(String msg, boolean expected, boolean actual){
			Assert.assertNotEquals(msg, expected, actual);
		}
	// W :-	
		
		public void waitForElementtoBeClickable(By locator){
			try {
				wait.until(ExpectedConditions.elementToBeClickable(locator));

			} catch (TimeoutException e) {
				Assert.fail("Element is not clickable : " +locator);
			}
		}

		public void waitForElementtoBeVisible(By locator){
			try {
				wait.until(ExpectedConditions.visibilityOfElementLocated(locator));

			} catch (TimeoutException e) {
				Assert.fail("Element is not visible : " +locator);
			}
		}
		
		public void waitForElementtoBePresent(By locator){
			try {
				wait.until(ExpectedConditions.presenceOfElementLocated(locator));

			} catch (TimeoutException e) {
				Assert.fail("Element is not present : " +locator);
			}
		}
		
		public void wait(int seconds){
			try {
				Thread.sleep(seconds * 1000);
			} catch (InterruptedException e) {
				System.out.println("Failed to wait for :" +seconds +" seconds");
			}
		}
		
		public void waitForElementToDisappear(By locator){
			try {
				wait.until(ExpectedConditions.invisibilityOfElementLocated(locator));
				} catch (TimeoutException e) {
			}
		}
}
