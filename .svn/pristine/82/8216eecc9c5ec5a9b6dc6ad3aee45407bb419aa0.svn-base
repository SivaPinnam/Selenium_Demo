/**********
*  Created By: Persistent Automation Team
*  Created On: 11/30/2016
*  Modified On: 12/05/2016
**********/
package com.pathway.scripts;

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import com.pathway.selenium.factory.SeleniumFunctions;
import com.pathway.util.Excel;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class Orders_DME_Page extends SeleniumFunctions {

	By orderTab = By.xpath("//a[contains(@href, '#Order')]");
	By enagementList = By.xpath(".//*[contains(@class,'hotListElement')]");
	By orderTypeDropdown = By.xpath(".//*[contains(@name,'j_id0:j_id24:EngReleatedTab:j_id238:formid:j_id241')]");
	By orderTypeLabel = By.xpath("//*[@id='pageid:formid:orderType']");
	By addOrderButton = By.xpath(".//*[contains(@value,'Add Order')]");
	By orderedMultiselectList = By.xpath("//*[@id='pageid:formid:pclstOrdered_unselected']");
	By orderedMultiSelectListItem = By.xpath("//*[@id='pageid:formid:pclstOrdered_right_arrow']");
	By orderedMultiSelectListItemAdding = By
			.xpath(".//*[@id='pageid:formid:j_id65']/table/tbody/tr/td[2]/table/tbody/tr[1]/td/div/img");
	By venderProvider = By.xpath("//*[@id='pageid:formid:Lookup3']");
	By orderingProvider = By.xpath(".//*[contains(@id,'pageid:formid:opinputid1_lkwgt')]");
	By searchField = By.xpath(".//*[@id='lksrch']");
	By goButton = By.xpath(".//*[contains(@class,'btn')]");
	By telephonicDiagnosis = By.xpath("//input[@id='pageid:formid:teleDiagnosis']");
	By venderProviderPhone = By.xpath("//*[@id='pageid:formid:vpPhone']");
	By fileUpload = By.xpath("//*[@id='pageid:j_id217:file']");
	By ICDMultiselectList = By.xpath("//*[@id='pageid:formid:multiselectComponent:componentController:btnRight']/img");
	By cancelButton_DME = By.xpath(".//*[contains(@class,'btn slds-button slds-button--neutral')]");
	By saveButton_DME = By.xpath("//*[@id='pageid:formid']/div[4]/input[1]");
	By orderList = By.xpath(".//*[contains(@class,'list _dataTable dataTable no-footer')]");
	By orderDMEViewLink = By
			.xpath(".//*[contains(@href,'https://pathway--Stage--c.cs44.visual.force.com/apex/DME_View?')]");
	By editButton = By.xpath(".//*[contains(@class,'slds-button slds-button--brand btnColor')]");
	By orderListCheckbox = By.xpath(
			"/html/body/div/div[2]/table/tbody/tr/td[2]/div/div[2]/div[2]/span/span/div/form/div[1]/div/div/div/div[1]/span[2]/span/div/div/table/tbody/tr[1]/td[9]/input");
	By approveButton = By.xpath("//*[@id='j_id0:j_id24:EngReleatedTab:j_id238:formid:j_id241:j_id273']/input");
	By fileBody = By.id("pageid:j_id217:j_id229:j_id230:j_id251:j_id253:tb");
	By userNavalLabel = By.xpath(".//*[contains(@id,'userNavLabel')]");
	By logoutButton = By.xpath(".//*[contains(@title,'Logout')]");

	// view page
	By verifyApprovalNeededColumn = By.xpath("//*[@id='pageid:formid']/div[3]/div[6]/div/div/span");
	By viewOrderingProvider = By.xpath("//*[@id='pageid:formid']/div[2]/div[13]/div/div/span");
	By viewTelephonicDiagnosis = By.xpath("//*[@id='pageid:formid']/div[2]/div[12]/div/div/span");
	By viewVenderProvider = By.xpath("//*[@id='pageid:formid']/div[2]/div[19]/div/div/span");
	By viewVenderProviderPhone = By.xpath("//*[@id='pageid:formid:j_id139']/span");
	By viewFileBody = By.id("pageid:formid:j_id183:j_id184:j_id187:j_id189:tb");
	By viewFileUpload = By.xpath("//*[@id='pageid:formid:j_id183:j_id184:j_id187:j_id189:0:j_id270']");

	// Data files

	String excel_file = "files//Orders.xlsx";
	String sheet_name = "DME_Order";

	// Data files attribute
	String Ordered = Excel.readFromExcel(excel_file, sheet_name, 1, 0);
	String VendorProvider = Excel.readFromExcel(excel_file, sheet_name, 1, 1);
	String TelephonicDiagnosis = Excel.readFromExcel(excel_file, sheet_name, 1, 2);
	String VendorPhone = Excel.readFromExcel(excel_file, sheet_name, 1, 3);
	String newVendorProvider = Excel.readFromExcel(excel_file, sheet_name, 4, 1);
	String newVendorPhone = Excel.readFromExcel(excel_file, sheet_name, 4, 3);
	String filePathAdd = Excel.readFromExcel(excel_file, sheet_name, 1, 4);
	String filePathEdit = Excel.readFromExcel(excel_file, sheet_name, 4, 4);

	// Class Variable
	private static String orderType = "DME";
	int countAfterCancel;
	int countBeforeAdd;
	int countAfterSave;
	int DME_orderCount_beforeadd;

	@Then("^validates that DME order page is displayed$")
	public void validates_that_DME_order_page_is_displayed() {
		verifyValues("DME order lable is visible. DME Order is displayed.", "DME", getText(orderTypeLabel));
		System.out.println("User is on the DME Order page");
	}

	@When("^user enters value for Entered By field$")
	public void user_enters_value_for_Entered_By_field() {
		System.out.println("Please enter the values");
	}

	@When("^enters value for ORDERED field of DME order page$")
	public void enters_value_for_ORDERED_field_of_DME_order_page() {
		wait(5);
		for (String val : Ordered.split(";")) {
			selectByVisibleText(orderedMultiselectList, val);
			System.out.println("Values are " + val);
		}
		click(orderedMultiSelectListItem);
	}

	@When("^enters value for ORDERING PROVIDER field of DME order page$")
	public void enters_value_for_ORDERING_PROVIDER_field_of_DME_order_page() {
		String searchString = getText(userNavalLabel);
		click(orderingProvider);
		String parentHandle = getWindowHandle();
		for (String childHandle : getWindowHandles()) {
			if (!parentHandle.equals(childHandle)) {
				switchToWindow(childHandle);
				switchToFrame("searchFrame");
				enter(searchField, searchString);
				click(goButton);
				driver.switchTo().defaultContent();
				switchToFrame("resultsFrame");
				driver.findElement(By.linkText(searchString)).click();
				switchToWindow(parentHandle);
			}
		}
		System.out.println("Entered value for Ordering Provide");
	}

	@When("^enters value for VENDER/PROVIDER of DME order page$")
	public void enters_value_for_VENDER_PROVIDER_of_DME_order_page() {
		enter(venderProvider, VendorProvider);
	}

	@When("^enters value for TELEPHONIC DIAGNOSIS of DME order page$")
	public void enters_value_for_TELEPHONIC_DIAGNOSIS_of_DME_order_page() {
		enter(telephonicDiagnosis, TelephonicDiagnosis);
	}

	@When("^enters value for VENDOR/PROVIDER PHONE of DME order page$")
	public void enters_value_for_VENDOR_PROVIDER_PHONE_of_DME_order_page() {
		enter(venderProviderPhone, VendorPhone);
	}

	@When("^uploads file for DME order on DME order page$")
	public void uploads_file_for_DME_order_on_DME_order_page() {
		filePathAdd = System.getProperty("user.dir") + "\\" + filePathAdd;
		enter(fileUpload, filePathAdd);
	}

	@When("^uploads new file for DME order on DME order page$")
	public void uploads_new_file_for_DME_order_on_DME_order_page() {
		filePathEdit = System.getProperty("user.dir") + "\\" + filePathEdit;
		enter(fileUpload, filePathEdit);
	}

	@Then("^validates that new DME Order is not created$")
	public void validates_that_new_DME_Order_is_not_created() {
		countAfterCancel = new Order_Page().get_Order_Count(orderType);
		countBeforeAdd = Order_Page.orderCount_beforeadd;
		System.out.println("Previous Order count in order table is: " + countBeforeAdd);
		System.out.println("After Cancel, Order count in order table is: " + countAfterCancel);
		verifyValues("New DME order created after Cancel operation", countAfterCancel, countBeforeAdd);
		System.out.println("Order Cancelled Successfully");
	}

	@When("^clicks on Save button on DME order page$")
	public void clicks_on_Save_button_on_DME_order_page() {
		click(saveButton_DME);
		wait(5);
	}

	@Then("^validates that new DME Order is created successfully$")
	public void validates_that_new_DME_Order_is_created_successfully() {
		countAfterSave = new Order_Page().get_Order_Count(orderType);
		countBeforeAdd = Order_Page.orderCount_beforeadd;
		System.out.println("Previous Order count in order table is: " + countBeforeAdd);
		System.out.println("After Save, Order count in order table is: " + countAfterSave);
		countBeforeAdd++;
		verifyValues("New DME Order is not  created successfully", countAfterSave, countBeforeAdd);
		System.out.println("Order Created Successfully");
	}

	@When("^user clicks on Orders tab of DME$")
	public void user_clicks_on_Orders_tab_of_DME() {
		click(orderTab);
	}

	@Then("^validates that Orders tab is displayed on Orders DME Page$")
	public void validates_that_Orders_tab_is_displayed_on_Orders_DME_Page() {
		isElementExist(orderList);
		System.out.println("Orders lists is displayed");
	}

	@When("^enters value for Vendor/Provider of DME order page$")
	public void enters_value_for_Vendor_Provider_of_DME_order_page() {
		enter(venderProvider, newVendorProvider);
	}

	@When("^enters value for Vendor/Provider Phone of DME order page$")
	public void enters_value_for_Vendor_Provider_Phone_of_DME_order_page() {
		enter(venderProviderPhone, newVendorPhone);
	}

	@Then("^validate that value for Ordering Provider of DME order page$")
	public void validate_that_value_for_Ordering_Provider_of_DME_order_page() {
		String OrderingProvider = getText(userNavalLabel);
		verifyelementText("Values has not succesfully selected for Ordering Provider of DME order page ",
				viewOrderingProvider, OrderingProvider);
	}

	@Then("^validate that value for Vendor/Provider of DME order page$")
	public void validate_that_value_for_Vendor_Provider_of_DME_order_page() {
		verifyelementText("Values has succesfully entered for Vendor/Provider of DME order page ", viewVenderProvider,
				newVendorProvider);
	}

	@Then("^validate that value for Telephonic Diagnosis of DME order page$")
	public void validate_that_value_for_Telephonic_Diagnosis_of_DME_order_page() {
		verifyelementText("Values has not succesfully entered for Telephonic Diagnosis of DME order page ",
				viewTelephonicDiagnosis, TelephonicDiagnosis);
	}

	@Then("^validate that value for Vendor/Provider Phone of DME order page$")
	public void validate_that_value_for_Vendor_Provider_Phone_of_DME_order_page() {
		verifyelementText("Values has not succesfully entered for Vendor/Provider Phone of DME order page ",
				viewVenderProviderPhone, newVendorPhone);
	}

	@Then("^validate that file has been uploaded on DME order page$")
	public void validate_that_file_has_been_uploaded_on_DME_order_page() {
		WebElement filesBody = findElement(fileBody);
		List<WebElement> rows = filesBody.findElements(By.tagName("tr"));
		// file name of the uploaded file
		String fname = rows.get(0).findElements(By.tagName("td")).get(2).getText();
		int fIndex = filePathAdd.lastIndexOf("\\");
		String uploadedFname = filePathAdd.substring(fIndex + 1);
		verifyValues("File has not uploaded", fname, uploadedFname);
	}

	@Then("^validate that new file has been uploaded on DME order page$")
	public void validate_that_new_file_has_been_uploaded_on_DME_order_page() {
		// file name of the uploaded file
		int fIndex = filePathEdit.lastIndexOf("\\");
		String uploadedFname = filePathEdit.substring(fIndex + 1);
		boolean fileFoundFlag = false;
		String fname;
		WebElement fileBody = findElement(viewFileBody);
		List<WebElement> rows = fileBody.findElements(By.tagName("tr"));
		for (int i = 0; i < rows.size(); i++) {
			fname = rows.get(i).findElements(By.tagName("td")).get(2).getText();
			if (fname.contentEquals(uploadedFname)) {
				fileFoundFlag = true;
				break;
			}
		}
		verifyValues("Uploaded file note found", true, fileFoundFlag);
	}

	@Then("^clicks on Cancel button on DME order page$")
	public void clicks_on_View_Cancel_button_on_DME_order_page() {
		click(cancelButton_DME);
	}
}
